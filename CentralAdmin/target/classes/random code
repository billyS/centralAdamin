<tr>
				<th>Server ID</th>
				<th>Server App Location</th>
				<th>Server Type</th>
				<th>Server Role</th>
				<th>Server Version</th>
				<th>User Name</th>
				<th>Password</th>
				<th>Host Name</th>
				<th>IP Address</th>
				<th>Monthly Cost</th>
				<th>Description</th>
				<th>SSL Key</th>
				<th>SSL Expiry</th>
				<th>Domain Expiry</th>
				<th>Provider</th>
				<th>OS</th>
				<th>OS Type</th>
				<th>OS Version</th>
				<th>Description Purpose</th>
				<th>Machine Type</th>
				<th>Processor</th>
				<th>Resin Pro</th>
				<th>Resin Pro Expiry Date</th>
				<th>SSH Ports</th>
				<th>Skynet Active</th>
				<th>Skynet Version</th>
				<th>Offsite Backup Active</th>
				<th>External IP Address</th>
				<th>Client ID</th>
				<th>DB Archiver Status</th>
				<th>DB Archiver Runtime</th>
				<th>Backup Directory</th>
				<th>Backup Location</th>
				<th>Backup Time</th>
				<th>Log Life Span</th>
				<th>Notes</th>
				<th>Providers</th>
				<th>RAM</th>
				<th>Cores</th>
				<th>HDD</th>
				<th></th>
			</tr>


							<td id="serverId"><c:out value="${server.serverId}"/></td>
							<td id="serverApplicationLocation"><c:out value="${server.serverApplicationLocation}"/></td>
							<td id="serverType"><c:out value="${server.serverType}"/></td>
							<td id="serverRole"><c:out value="${server.serverRole}"/></td>
							<td id="serverVersion"><c:out value="${server.serverVersion}"/></td>
							<td id="userName"><c:out value="${server.userName}"/></td>
							<td id="password"><c:out value="${server.password}"/></td>
							<td id="hostName"><c:out value="${server.hostName}"/></td>
							<td id="IPAddress"><c:out value="${server.IPAddress}"/></td>
							<td id="monthlyCost"><c:out value="${server.monthlyCost}"/></td>
							<td id="description"><c:out value="${server.description}"/></td>
							<td id="sslKey"><c:out value="${server.sslKey}"/></td>
							<td id="sslExpiry"><c:out value="${server.sslExpiry}"/></td>
							<td id="domainExpiryDate"><c:out value="${server.domainExpiryDate}"/></td>
							<td id="provider"><c:out value="${server.provider}"/></td>
							<td id="os"><c:out value="${server.os}"/></td>
							<td id="osType"><c:out value="${server.osType}"/></td>
							<td id="osVersion"><c:out value="${server.osVersion}"/></td>
							<td id="descriptionPurpose"><c:out value="${server.descriptionPurpose}"/></td>
							<td id="machineType"><c:out value="${server.machineType}"/></td>
							<td id="prosessor"><c:out value="${server.prosessor}"/></td>
							<td id="isResinPro"><c:out value="${server.isResinPro}"/></td>
							<td id="resinProExpiyDate"><c:out value="${server.resinProExpiyDate}"/></td>
							<td id="sshPorts"><c:out value="${server.sshPorts}"/></td>
							<td id="skynetActive"><c:out value="${server.skynetActive}"/></td>
							<td id="skynetVersion"><c:out value="${server.skynetVersion}"/></td>
							<td id="offsiteBackupActive"><c:out value="${server.offsiteBackupActive}"/></td>
							<td id="externalIPAddress"><c:out value="${server.externalIPAddress}"/></td>
							<td id="clientId"><c:out value="${server.clientId}"/></td>
							<td id="dbArchiverStatus"><c:out value="${server.dbArchiverStatus}"/></td>
							<td id="dBArchiverRuntime"><c:out value="${server.dBArchiverRuntime}"/></td>
							<td id="backUpDirectory"><c:out value="${server.backUpDirectory}"/></td>
							<td id="backUpLocation"><c:out value="${server.backUpLocation}"/></td>
							<td id="backupTime"><c:out value="${server.backupTime}"/></td>
							<td id="logLifespan"><c:out value="${server.logLifespan}"/></td>
							<td id="notes"><c:out value="${server.notes}"/></td>
							<td id="providers"><c:out value="${server.providers}"/></td>
							<td id="ram"><c:out value="${server.ram}"/></td>
							<td id="cores"><c:out value="${server.cores}"/></td>
							<td id="hdd"><c:out value="${server.hdd}"/></td>
							<td class="align-center">
						        <div class="btn-group editBtn">
									<button 
									type="button" 
									title="Edit" 
									data-id="${server.serverId}" 
									
									class="btn btn-primary editServer">
										<span class="glyphicon glyphicon-pencil"></span>
									</button>
								</div>
							
								<div class="btn-group deleteBtn deleteServer">
									<button
										type="button"
										title="Delete"
										data-id="${server.serverId}"
										class="btn btn-danger delete">
										<span class="glyphicon glyphicon-trash"></span>
									</button>
								</div>
							</td>
							
							
							
							<td><c:forTokens items="${user.role}" delims="," var="name">
   								<c:out value="${name}"/><p>
								</c:forTokens>
							</td>
							
							
							package uk.co.F1x2Games;

import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;

import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
import org.springframework.core.io.support.PropertiesLoaderUtils;

import java.sql.*;
import java.io.FileInputStream;
import java.io.IOException;

public class PostMan{

	Properties properties;
	PropertyPlaceholderConfigurer props2;

	Utils ut =  Utils.getInstance();
	String logName = "MAIL";
	String clientName = "";
	String mailServer = "";
	String mailPort = "";
	String mailUsername = "";
	String mailPassword = "";
	
	public PostMan() {
		
		try {
			properties= PropertiesLoaderUtils.loadAllProperties("General.properties");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		props2 = new PropertyPlaceholderConfigurer();
		props2.setProperties(properties);
		//clientName = properties.getProperty("client_name");
		//mailServer = properties.getProperty("mail_server");
		//mailPort = properties.getProperty("mail_port");
		mailUsername = properties.getProperty("mail_username");
		mailPassword = properties.getProperty("mail_password");
	}
	
	public void postMail(String[] recipients, String message) throws MessagingException {

		final String emailSMTPserver = "smtp.gmail.com";
		final String emailServerPort = "465";
		String emailSubject = "Test Mail";

		Properties props = new Properties();
		props.put("mail.smtp.user",mailUsername);
		props.put("mail.smtp.host", emailSMTPserver);
		props.put("mail.smtp.port", emailServerPort);
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.socketFactory.port", emailServerPort);
		props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
		props.put("mail.smtp.socketFactory.fallback", "false");
		SecurityManager security = System.getSecurityManager();
		try
		{
			Authenticator auth = new SMTPAuthenticator();
			Session session = Session.getInstance(props, auth);
			MimeMessage msg = new MimeMessage(session);
			msg.setText(message);
			msg.setSubject(emailSubject);
			msg.setFrom(new InternetAddress(mailUsername));
			
			for(String recipient: recipients){
				msg.addRecipient(Message.RecipientType.TO,
						new InternetAddress(recipient));
			}
			
			Transport.send(msg);
			System.out.println("Message send Successfully:)");
		}
		catch (Exception mex)
		{
			mex.printStackTrace();
		}
	}
	
	/*public void mailError(String error) throws java.io.IOException {
		String[] to = {"support@football1x2.com"};
		StringBuffer whoTo = new StringBuffer("");
		for (int i=0; i<to.length; i++){whoTo.append(" "+to[i]+" ");}
		//ut.Logger(logName, "emails sending to : "+whoTo);
		String msg = "Message from "+clientName+" Nature of error is: "+error+"";
		String sub = "Server process Error";
		String from = "support@football1x2.com";

		Calendar calendar = Calendar.getInstance();
		//Need to add padding to month/days (so it says 06 instead of 6)
		String month = ""+(int)(calendar.get(Calendar.MONTH)+1); if (month.length()==1){month="0"+month;}
		String day = ""+(int)calendar.get(Calendar.DAY_OF_MONTH); if (day.length()==1){day="0"+day;}
		String logFile = "MailedErrors"+calendar.get(Calendar.YEAR)+"-"+month+"-"+day;
		String logDIR = properties.getProperty("logDIR");
		boolean sendEmail = true;
		try{
			FileInputStream fis = new FileInputStream(logDIR+logFile);
			byte[] b = new byte[fis.available()];
			fis.read(b);
			String file = new String(b);
			if (file.indexOf(msg)!=-1){
				sendEmail=false;
				//ut.Logger(logName,"error already sent today");
			}
			fis.close();
		}
		catch(Exception e){}
		
		if (sendEmail){
			try{
				//postMail(to, sub, msg, from);
				//ut.Logger("MailedErrors",msg);
				//ut.Logger(logName,"Sent successfully");
			}
			catch (javax.mail.MessagingException me){
				me.printStackTrace();
				//ut.Logger(logName, "Unable to mailError");
				//ut.Logger(logName, me);
			}
			catch (java.lang.Exception e) {
				e.printStackTrace();
				//ut.Logger(logName, "Unable to mailError");
				//ut.Logger(logName, e);
			}
		}
	}*/
	
	/*public void mailError(String error, String subject) throws java.io.IOException {
		mailError(error);
	}
	*/
	public class SMTPAuthenticator extends javax.mail.Authenticator {
		public PasswordAuthentication getPasswordAuthentication()
		{
			return new PasswordAuthentication(mailUsername, mailPassword);
		}
	}

}


<%@taglib prefix="spring" uri="http://www.springframework.org/tags"%>
<%@taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<%@taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@page session="true"%>
<!DOCTYPE html>
<html lang="en">
<head>
	<spring:url value="/resources/css/bootstrap.min.css" var="bootMinCss"/>
	<spring:url value="/resources/css/main.css" var="mainCss"/>
	
	<spring:url value="/resources/js/jquery-3.1.1.min.js" var="jqueryJs" />
	<spring:url value="/resources/js/bootstrap.min.js" var="bootstrapMinJs"/>
	<spring:url value="/resources/js/main.js" var="mainJs" />
	<spring:url value="/resources/js/login.js" var="loginJs" />
	


	<link href="${bootMinCss}" rel="stylesheet"/>
	<link href="${mainCss}" rel="stylesheet"/>
	
    <script src="${jqueryJs}" type="application/json"></script>
    <script src="${bootstrapMinJs}" type="application/json"></script>
    <script src="${mainJs}" type="application/json"></script>
     <script src="${loginJs}" type="application/json"></script>
    <script> var contextpath='${contextpath}';</script>
</head>

<body onload='document.loginForm.username.focus();'>

	<h1>${title}</h1>
	<h1>${message}</h1>


	<div id="login-box">

		<h3>Login with Username and Password</h3>

		<c:if test="${not empty error}">
			<div class="error">${error}</div>
		</c:if>
		<c:if test="${not empty msg}">
			<div class="msg">${msg}</div>
		</c:if>
		
		<form name='loginForm' action="<c:url value='/auth/login_check?targetUrl=${targetUrl}' />" method='POST'>
			<table>
				<tr>
					<td>User Name:</td>
					<td><input type='text' name='username'></td>
				</tr>
				<tr>
					<td>Password:</td>
					<td><input type='password' name='password' /></td>
				</tr>
				<tr>
					<td colspan='2'><input name="submit" type="submit" value="submit" /></td>
				</tr>
			</table>
			<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}" />
		</form>
	</div>
</body>
</html>